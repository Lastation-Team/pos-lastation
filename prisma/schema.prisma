// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model SuperAdmin {
  id String @id @default(uuid())
  name String
  username String @unique
  password String
  clients Clients[]
  @@map("super_admin")
}

model Clients {
  id String @id @default(uuid())
  license_key String @unique
  client_name String 
  client_code String @unique
  is_active Boolean @default(false)
  expired_at DateTime @db.Timestamp
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt
  super_admin_id String
  superAdmin SuperAdmin @relation(fields: [super_admin_id], references: [id])
  admin Admins?
}

model Admins {
  id String @id @default(uuid())
  pin Int @db.Int()
  name String
  username String @unique
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt
  client_id String @unique
  client Clients @relation(fields: [client_id], references: [id], onDelete: Cascade)
  setting Settings?
  employees Employees[]
}

model Settings {
  id Int @id @default(autoincrement())
  emp_can_login Boolean @default(true)
  emp_can_create Boolean @default(true)
  emp_can_update Boolean @default(true)
  emp_can_delete Boolean @default(true)
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt
  admin_id String @unique
  admin Admins @relation(fields: [admin_id], references: [id], onDelete: Cascade)
}

model Employees {
  id String @id @default(uuid())
  name String
  pin Int
  employee_code String @db.Char(10) @unique
  avatar_url String?
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt
  admin_id String
  admin Admins @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  customers Customers[]
  products Products[]
  transactions Transactions[]
}

model Customers {
  id String @id @default(uuid())
  customer_code String @db.Char(10) @unique
  name String
  email String @unique
  phone String @db.VarChar(15)
  point Int @default(0)
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt
  created_by String
  employee Employees @relation(fields: [created_by], references: [id])
  transactions Transactions[]
}

model Products {
  id String @id @default(uuid())
  barcode String @db.VarChar(12) @unique
  product_name String
  smallest_selling_unit String?
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt
  created_by String
  employee Employees @relation(fields: [created_by], references: [id])
  sellingUnits SellingUnits[]
}

model Units {
  id Int @id @default(autoincrement())
  name String
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt
  sellingUnits SellingUnits[]
}

model SellingUnits {
  id String @id @default(uuid())
  is_smallest Boolean @default(false)
  stock Int @default(0)
  price Decimal @default(0)
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt
  product_id String 
  product Products @relation(fields: [product_id], references: [id])
  unit_id Int
  unit Units @relation(fields: [unit_id], references: [id])
  transactionLists TransactionLists[]
  @@map("selling_units")
}

model Transactions {
  id String @id @default(uuid())
  no_ref String @unique @db.VarChar(21)
  total_price Decimal
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt
  employee_id String
  employee Employees @relation(fields: [employee_id], references: [id])
  customer_id String?
  customer Customers? @relation(fields: [customer_id], references: [id])
  transactionLists TransactionLists[]
}

model TransactionLists {
  id String @id @default(uuid())
  qty Int 
  total_price Decimal
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt
  selling_unit_id String
  sellingUnit SellingUnits @relation(fields: [selling_unit_id], references: [id])
  transaction_id String
  transaction Transactions @relation(fields: [transaction_id], references: [id])
  @@map("transaction_lists")
}
